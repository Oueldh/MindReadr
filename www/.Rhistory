nn=M[,,X>=8/128 & X<13/128]
g1=graph_from_adjacency_matrix(adj_matrix(.7,moy_coh(nn)),mode="undirected")
png(paste("Rplot_", i, ".png"))
plot.igraph(g1,layout=two_Dcoord,vertex.color="pink",edge.color="red",vertex.label=elec_names)
#dev.off()
}
list.files(path='/$PATH/', pattern = '*.png', full.names = TRUE) %>%
image_read() %>% # reads each path file
image_join() %>% # joins image
image_animate(fps=4) %>% # animates, can opt for number of loops
image_write("FileName.gif") # write to current dir
#file.remove(list.files(pattern=".png"))
}
anim(bastien_o,5)
anim(bastien_o,5)
file.remove(list.files(pattern=".png"))
file.remove(list.files(pattern=".png"))
file.remove(list.files(pattern=".png"))
file.remove(list.files(pattern=".png"))
file.remove(list.files(pattern=".png"))
anim=function(eeg_data,interval){
n=length(eeg_data[,1])
k=interval*128
nb_animations=n%/%k
data("eegcoord")
myelectrodes <- colnames(eeg_data)
two_Dcoord=as.matrix(eegcoord[rownames(eegcoord)%in%myelectrodes,c(4,5)])
elec_names=rownames(two_Dcoord)
eeg_data=eeg_data[,elec_names]
n=length(eeg_data[,1])
d=seq(1,n,k)
for (i in 1:(length(d)-1)){
u=mvspec(eeg_data[d[i]:d[i+1],],plot = F)
M=u$fxx
X=u$freq
nn=M[,,X>=8/128 & X<13/128]
g1=graph_from_adjacency_matrix(adj_matrix(.7,moy_coh(nn)),mode="undirected")
png(paste("Rplot_", i, ".png"))
plot.igraph(g1,layout=two_Dcoord,vertex.color="pink",edge.color="red",vertex.label=elec_names)
dev.off()
}
list.files(path='/$PATH/', pattern = '*.png', full.names = TRUE) %>%
image_read() %>% # reads each path file
image_join() %>% # joins image
image_animate(fps=4) %>% # animates, can opt for number of loops
image_write("FileName.gif") # write to current dir
#file.remove(list.files(pattern=".png"))
}
anim(bastien_o,5)
file.remove(list.files(pattern=".png"))
anim(bastien_o,10)
file.remove(list.files(pattern=".png"))
anim=function(eeg_data,interval){
n=length(eeg_data[,1])
k=interval*128
nb_animations=n%/%k
data("eegcoord")
myelectrodes <- colnames(eeg_data)
two_Dcoord=as.matrix(eegcoord[rownames(eegcoord)%in%myelectrodes,c(4,5)])
elec_names=rownames(two_Dcoord)
eeg_data=eeg_data[,elec_names]
n=length(eeg_data[,1])
d=seq(1,n,k)
for (i in 1:(length(d)-1)){
u=mvspec(eeg_data[d[i]:d[i+1],],plot = F)
M=u$fxx
X=u$freq
nn=M[,,X>=8/128 & X<13/128]
g1=graph_from_adjacency_matrix(adj_matrix(.7,moy_coh(nn)),mode="undirected")
#png(paste("Rplot_", i, ".png"))
plot.igraph(g1,layout=two_Dcoord,vertex.color="pink",edge.color="red",vertex.label=elec_names)
#dev.off()
}
#list.files(path='/$PATH/', pattern = '*.png', full.names = TRUE) %>%
#image_read() %>% # reads each path file
#image_join() %>% # joins image
#image_animate(fps=4) %>% # animates, can opt for number of loops
#image_write("FileName.gif") # write to current dir
#file.remove(list.files(pattern=".png"))
}
anim(bastien_o,10)
file.remove(list.files(pattern=".png"))
file.remove(list.files(pattern=".png"))
file.remove(list.files(pattern=".png"))
file.remove(list.files(pattern=".png"))
anim(bastien_o,10)
file.remove(list.files(pattern=".png"))
```{r}
anim(bastien_o,10)
file.remove(list.files(pattern=".png"))
anim(bastien_o,10)
#file.remove(list.files(pattern=".png"))
knitr::opts_chunk$set(echo = TRUE)
individu1_ec1=read.table("~/Desktop/Stage/PLOS one Improving quality of EEG/1/eyesclosed1.dat"
,sep="")
individu1_ec2=read.table("~/Desktop/Stage/PLOS one Improving quality of EEG/1/eyesclosed2.dat"
,sep="")
individu1_ec3=read.table("~/Desktop/Stage/PLOS one Improving quality of EEG/1/eyesclosed3.dat"
,sep="")
individu1_ec4=read.table("~/Desktop/Stage/PLOS one Improving quality of EEG/1/eyesclosed4.dat"
,sep="")
individu1_ec5=read.table("~/Desktop/Stage/PLOS one Improving quality of EEG/1/eyesclosed5.dat"
,sep="")
individu1_ec6=read.table("~/Desktop/Stage/PLOS one Improving quality of EEG/1/eyesclosed6.dat"
,sep="")
EEG_closed= read.table("~/Desktop/Stage/PLOS one Improving quality of EEG/eyesclosed_11_14channels.dat",sep="")
EEG_open=read.table("~/Desktop/Stage/PLOS one Improving quality of EEG/flicker_11_14channels.dat",sep="")
library(eegkit)
library(zoo)
par(bg="lightyellow", mfrow=c(2,3))
ts.plot(individu1_ec1[1:50,1])
ts.plot(individu1_ec2[1:50,1])
ts.plot(individu1_ec3[1:50,1])
ts.plot(individu1_ec4[1:50,1])
ts.plot(individu1_ec5[1:50,1])
ts.plot(individu1_ec6[1:50,1])
library(eegkit)
par(bg="lightyellow")
library(eegkit)
library(tidyverse)
library(lubridate)
library(timetk)
x=ts(EEG_closed)
Fs=length(x)/30
r=eegfft(x, Fs)
stationary.test(ts(EEG_open[1:120,1]))
library(astsa)
library(igraph)
library(eegkit)
par(mfrow=c(1,2))
data("eegcoord")
bastien_f=read.table("Data/yeux_fermes_j1_BC_ASR.csv",header = T,sep=",")
bastien_f=bastien_f[-1]
bastien_o=read.table("Data/yeux_ouverts_j1_BC_ASR.csv",header = T,sep=",")
bastien_o=bastien_o[-1]
myelectrodes <- colnames(bastien_f)
two_Dcoord=as.matrix(eegcoord[rownames(eegcoord)%in%myelectrodes,c(4,5)])
#two_Dcoord=two_Dcoord[order(two_Dcoord[,2],decreasing = T), ]
threeD_coord=as.matrix(eegcoord[rownames(eegcoord)%in%myelectrodes,c(1,2,3)])
elec_names=rownames(two_Dcoord)
bastien_f=bastien_f[,elec_names]
bastien_o=bastien_o[,elec_names]
u=mvspec(bastien_f,plot = F)
v=mvspec(bastien_o,plot = F)
M=u$fxx
X=u$freq
nn=M[,,X>=8/128 & X<13/128]
MM=v$fxx
XX=v$freq
nnn=MM[,,XX>=8/128 & XX<13/128]
adjmu=adj_matrix(.7,moy_coh(nn))
#Return the spectral matrices of the band chosen by the user
spec_matrix=function(data,bande){
# Getting the frequencies from mvspec
X=data$freq
#Getting all the spectral matrices for different frequencies
M=data$fxx
#Delta waves
if (bande==1){
spec=M[,,X>=.2/128 & X<4/128]
return(spec)
}
#Theta waves
else if (bande==2){
spec=M[,,X>=.4/128 & X<8/128]
return(spec)
}
#Alpha waves
else if (bande==3){
spec=M[,,X>=8/128 & X<13/128]
return(spec)
}
#Beta waves
else if (bande==4){
spec=M[,,X>=13/128 & X<35/128]
return(spec)
}
#Gamma Waves
else {
spec=M[,,X>=35/128 & X<=64/128]
return(spec)
}
}
coh_matrix=function(spect){
n=length(spect[,1])
cohh=matrix(rep(0),nrow = n,ncol = n)
d=Re(diag(spect))
dd=tcrossprod(d)
cohh=Mod(spect)**2/dd
return(cohh)
}
#Compute the mean of the coherence matrices
moy_coh=function(all_spect_matrix){
return(coh_matrix(apply(all_spect_matrix,c(1,2),mean)))
}
adj_matrix=function(thresh,M){
n=length(M[,1])
adjm=matrix(as.numeric(M>thresh),nrow = n,ncol = n)
return(`diag<-`(adjm,0))
}
library(eegkit)
u=mvspec(bastien_f)
eegpsd(bastien_f, Fs=128, lower =8, upper =12, units = "dB",)
library(eegkit)
u=mvspec(bastien_f[1:5*128,])
eegpsd(bastien_f[1:5*128,], Fs=128, lower =8, upper =12, units = "dB",)
library(eegkit)
u=mvspec(bastien_f[1:5*128,])
eegpsd(bastien_f[1:1280,], Fs=128, lower =8, upper =12, units = "dB",)
library(eegkit)
u=mvspec(bastien_f[1:1280,])
eegpsd(bastien_f[1:1280,], Fs=128, lower =8, upper =12, units = "dB",)
library(eegkit)
u=mvspec(bastien_f[1:1280,])
eegpsd(bastien_f[1:1280,], Fs=128, lower =0.2, upper =12, units = "dB",)
library(eegkit)
u=mvspec(bastien_f[1:1280,])
eegpsd(bastien_o[1:1280,], Fs=128, lower =0.2, upper =12, units = "dB",)
library(eegkit)
u=mvspec(bastien_f[1:1280,])
eegpsd(bastien_o[1:1280,], Fs=128, lower =0.2, upper =12, units = "dB",)
eegpsd(bastien_f[1:1280,], Fs=128, lower =0.2, upper =12, units = "dB",)
library(eegkit)
u=mvspec(bastien_f[1:1280,])
eegpsd(bastien_o[1:1280,], Fs=128, lower =8, upper =15, units = "dB",)
eegpsd(bastien_f[1:1280,], Fs=128, lower =8, upper =15, units = "dB",)
library(eegkit)
u=mvspec(bastien_f[1:1280,])
eegpsd(bastien_o[1:1280,], Fs=128, lower =30, upper =64, units = "dB",)
library(eegkit)
u=mvspec(bastien_f[1:1280,])
eegpsd(bastien_o[1:1280,], Fs=128, lower =30, upper =63, units = "dB",)
eegpsd(bastien_f[1:1280,], Fs=128, lower =30, upper =63, units = "dB",)
library(eegkit)
u=mvspec(bastien_f[1:1280,])
eegpsd(bastien_o[1:1280,], Fs=128, lower =8, upper =15, units = "dB",)
eegpsd(bastien_f[1:1280,], Fs=128, lower =8, upper =15, units = "dB",)
library(astsa)
library(igraph)
library(eegkit)
par(mfrow=c(1,2))
data("eegcoord")
bastien_f=read.table("Data/yeux_fermes_j1_BC_ASR.csv",header = T,sep=",")
bastien_f=bastien_f[-1]
bastien_o=read.table("Data/yeux_ouverts_j1_BC_ASR.csv",header = T,sep=",")
bastien_o=bastien_o[-1]
myelectrodes <- colnames(bastien_f)
two_Dcoord=as.matrix(eegcoord[rownames(eegcoord)%in%myelectrodes,c(4,5)])
#two_Dcoord=two_Dcoord[order(two_Dcoord[,2],decreasing = T), ]
threeD_coord=as.matrix(eegcoord[rownames(eegcoord)%in%myelectrodes,c(1,2,3)])
elec_names=rownames(two_Dcoord)
bastien_f=bastien_f[,elec_names]
bastien_o=bastien_o[,elec_names]
u=mvspec(bastien_f,plot = F)
v=mvspec(bastien_o,plot = F)
M=u$fxx
X=u$freq
nn=M[,,X>=8/128 & X<15/128]
MM=v$fxx
XX=v$freq
nnn=MM[,,XX>=8/128 & XX<15/128]
adjmu=adj_matrix(.7,moy_coh(nn))
adjmv=adj_matrix(.7,moy_coh(nnn))
g1=graph_from_adjacency_matrix(adjmu,mode = "undirected")
g2=graph_from_adjacency_matrix(adjmv,mode="undirected")
plot.igraph(g1,layout=two_Dcoord,vertex.color="pink",edge.color="red",vertex.label=elec_names)
plot.igraph(g2,layout=two_Dcoord,vertex.color="pink",edge.color="black",vertex.label=elec_names)
#Return the spectral matrices of the band chosen by the user
spec_matrix=function(data,bande){
# Getting the frequencies from mvspec
X=data$freq
#Getting all the spectral matrices for different frequencies
M=data$fxx
#Delta waves
if (bande==1){
spec=M[,,X>=.1/128 & X<=3/128]
return(spec)
}
#Theta waves
else if (bande==2){
spec=M[,,X>=4/128 & X<=7/128]
return(spec)
}
#Alpha waves
else if (bande==3){
spec=M[,,X>=8/128 & X<=15/128]
return(spec)
}
#Beta waves
else if (bande==4){
spec=M[,,X>=16/128 & X<=30/128]
return(spec)
}
#Gamma Waves
else {
spec=M[,,X>=30/128 & X<=64/128]
return(spec)
}
}
coh_matrix=function(spect){
n=length(spect[,1])
cohh=matrix(rep(0),nrow = n,ncol = n)
d=Re(diag(spect))
dd=tcrossprod(d)
cohh=Mod(spect)**2/dd
return(cohh)
}
#Compute the mean of the coherence matrices
moy_coh=function(all_spect_matrix){
return(coh_matrix(apply(all_spect_matrix,c(1,2),mean)))
}
adj_matrix=function(thresh,M){
n=length(M[,1])
adjm=matrix(as.numeric(M>thresh),nrow = n,ncol = n)
return(`diag<-`(adjm,0))
}
library(astsa)
library(igraph)
library(eegkit)
par(mfrow=c(1,2))
data("eegcoord")
bastien_f=read.table("Data/yeux_fermes_j1_BC_ASR.csv",header = T,sep=",")
bastien_f=bastien_f[-1]
bastien_o=read.table("Data/yeux_ouverts_j1_BC_ASR.csv",header = T,sep=",")
bastien_o=bastien_o[-1]
myelectrodes <- colnames(bastien_f)
two_Dcoord=as.matrix(eegcoord[rownames(eegcoord)%in%myelectrodes,c(4,5)])
#two_Dcoord=two_Dcoord[order(two_Dcoord[,2],decreasing = T), ]
threeD_coord=as.matrix(eegcoord[rownames(eegcoord)%in%myelectrodes,c(1,2,3)])
elec_names=rownames(two_Dcoord)
bastien_f=bastien_f[,elec_names]
bastien_o=bastien_o[,elec_names]
u=mvspec(bastien_f,plot = F)
v=mvspec(bastien_o,plot = F)
M=u$fxx
X=u$freq
nn=M[,,X>=8/128 & X<15/128]
MM=v$fxx
XX=v$freq
nnn=MM[,,XX>=8/128 & XX<15/128]
adjmu=adj_matrix(.7,moy_coh(nn))
adjmv=adj_matrix(.7,moy_coh(nnn))
g1=graph_from_adjacency_matrix(adjmu,mode = "undirected")
g2=graph_from_adjacency_matrix(adjmv,mode="undirected")
plot.igraph(g1,layout=two_Dcoord,vertex.color="pink",edge.color="red",vertex.label=elec_names)
plot.igraph(g2,layout=two_Dcoord,vertex.color="pink",edge.color="black",vertex.label=elec_names)
par(mfrow=c(1,2))
n=min(length(bastien_f[,1]),length(bastien_o[,1]))
k=10*128
dd=seq(1,n,k)
for (i in 1:(length(dd)-1) ){
u=mvspec(bastien_f[dd[i]:dd[i+1],],plot = F)
v=mvspec(bastien_o[dd[i]:dd[i+1],],plot = F)
M=u$fxx
X=u$freq
nn=M[,,X>=8/128 & X<13/128]
MM=v$fxx
XX=v$freq
nnn=MM[,,XX>=8/128 & XX<13/128]
g1=graph_from_adjacency_matrix(adj_matrix(.8,moy_coh(nn)),mode="undirected")
g2=graph_from_adjacency_matrix(adj_matrix(.8,moy_coh(nnn)),mode="undirected")
plot.igraph(g1,layout=two_Dcoord,vertex.color="pink",edge.color="red",vertex.label=elec_names)
plot(g2,layout=two_Dcoord,vertex.color="pink",edge.color="black",vertex.label=elec_names)
}
library(magick)
library(magrittr)
anim=function(eeg_data_c,eeg_data_o,interval,thresh,bande,name){
#Getting the name of the electrodes of interest.
myelectrodes <- colnames(eeg_data_c)
data("eegcoord")
#Getting the coordinates of the electrodes of interest.
two_Dcoord=as.matrix(eegcoord[rownames(eegcoord)%in%myelectrodes,c(4,5)])
#Sorting the data to get the correct placement of electrodes
elec_names=rownames(two_Dcoord)
eeg_data_c=eeg_data_c[,elec_names]
eeg_data_o=eeg_data_o[,elec_names]
n=min(length(eeg_data_c[,1]),length(eeg_data_o[,1]))
k=interval*128
d=seq(1,n,k)
for (i in 1:(length(d)-1)){
u=mvspec(eeg_data_c[d[i]:d[i+1],],plot = F)
#Spectral matrix for eyes closed
specu=spec_matrix(u,bande)
#Coherence Matrix
cohu=moy_coh(specu)
#Adjacency matrix for eyes closed
adjmu=adj_matrix(thresh,cohu)
#Graph from the adjacency matrix for eyes closed
g1 <- graph_from_adjacency_matrix(adjmu,mode = "undirected")
v=mvspec(eeg_data_o[d[i]:d[i+1],],plot = F)
#Spectral matrix for eyes open
specv=spec_matrix(v,bande)
#Coherence Matrix
cohv=moy_coh(specv)
#Adjacency matrix for eyes open
adjmv=adj_matrix(thresh,cohv)
#Graph from the adjacency matrix for eyes open
g2 <- graph_from_adjacency_matrix(adjmv,mode = "undirected")
par(mfrow=c(1,2))
plot(g1,layout=two_Dcoord,vertex.color="pink",edge.color="black",vertex.label=elec_names,main="Closed")
plot(g2,layout=two_Dcoord,vertex.color="pink",edge.color="red",vertex.label=elec_names,main="Opened")
}
}
library(animation)
saveVideo(
anim(bastien_f,bastien_o,5,.8,3,"J1")
,
video.name = "test.mp4",
img.name = "J1",
interval = .5,
ani.width = 1080,
ani.height = 640,
outdir = getwd()
)
#anim(bastien_f,bastien_o,5,.8,3,"J1")
library(eegkit)
u=mvspec(bastien_f[1:1280,])
eegpsd(bastien_f[1:1280,], Fs=128, lower =8, upper =15, units = "dB",)
eegpsd(bastien_o[1:1280,], Fs=128, lower =8, upper =15, units = "dB",)
library(eegkit)
par(mfrow=c(1,2))
eegpsd(bastien_f[1:1280,], Fs=128, lower =8, upper =15, units = "dB",)
eegpsd(bastien_o[1:1280,], Fs=128, lower =8, upper =15, units = "dB",)
library(eegkit)
par(mfrow=c(1,2))
eegpsd(bastien_f[1:1280,], Fs=128, lower =8, upper =15, units = "dB",)
eegpsd(bastien_o[1:1280,], Fs=128, lower =8, upper =15, units = "dB",)
library(eegkit)
par(mfrow=c(1,2))
eegpsd(bastien_f[1:1280,], Fs=128, lower =8, upper =15, units = "dB",main="Eyes closed")
eegpsd(bastien_o[1:1280,], Fs=128, lower =8, upper =15, units = "dB",)
library(eegkit)
par(mfrow=c(1,2))
eegpsd(bastien_f[1:1280,], Fs=128, lower =8, upper =15, units = "dB",main="Eyes closed")
eegpsd(bastien_o[1:1280,], Fs=128, lower =8, upper =15, units = "dB",main="Eyes open")
library(eegkit)
par(mfrow=c(1,2))
svg("my_plot.svg")
eegpsd(bastien_f[1:1280,], Fs=128, lower =8, upper =15, units = "dB",main="Eyes closed")
eegpsd(bastien_o[1:1280,], Fs=128, lower =8, upper =15, units = "dB",main="Eyes open")
library(eegkit)
par(mfrow=c(1,2))
png("PSD;png")
eegpsd(bastien_f[1:1280,], Fs=128, lower =8, upper =15, units = "dB",main="Eyes closed")
eegpsd(bastien_o[1:1280,], Fs=128, lower =8, upper =15, units = "dB",main="Eyes open")
library(eegkit)
par(mfrow=c(1,2))
png("PSD.png")
eegpsd(bastien_f[1:1280,], Fs=128, lower =8, upper =15, units = "dB",main="Eyes closed")
eegpsd(bastien_o[1:1280,], Fs=128, lower =8, upper =15, units = "dB",main="Eyes open")
library(eegkit)
par(mfrow=c(1,2))
png("PSDf.png")
eegpsd(bastien_f[1:1280,], Fs=128, lower =8, upper =15, units = "dB",main="Eyes closed")
png("PSDo.png")
eegpsd(bastien_o[1:1280,], Fs=128, lower =8, upper =15, units = "dB",main="Eyes open")
library(eegkit)
par(mfrow=c(1,2))
png("PSDf.png")
eegpsd(bastien_f[1:1280,], Fs=128, lower =8, upper =15, units = "dB",main="Eyes closed")
#png("PSDo.png")
#eegpsd(bastien_o[1:1280,], Fs=128, lower =8, upper =15, units = "dB",main="Eyes open")
library(eegkit)
par(mfrow=c(1,2))
eegpsd(bastien_f[1:1280,], Fs=128, lower =8, upper =15, units = "dB",main="Eyes closed")
eegpsd(bastien_o[1:1280,], Fs=128, lower =8, upper =15, units = "dB",main="Eyes open")
library(eegkit)
par(mfrow=c(1,2))
eegpsd(bastien_f, Fs=128, lower =8, upper =15, units = "dB",main="Eyes closed")
eegpsd(bastien_o, Fs=128, lower =8, upper =15, units = "dB",main="Eyes open")
knitr::opts_chunk$set(echo = TRUE)
individu1_ec1=read.table("~/Desktop/Stage/PLOS one Improving quality of EEG/1/eyesclosed1.dat"
,sep="")
individu1_ec2=read.table("~/Desktop/Stage/PLOS one Improving quality of EEG/1/eyesclosed2.dat"
,sep="")
individu1_ec3=read.table("~/Desktop/Stage/PLOS one Improving quality of EEG/1/eyesclosed3.dat"
,sep="")
individu1_ec4=read.table("~/Desktop/Stage/PLOS one Improving quality of EEG/1/eyesclosed4.dat"
,sep="")
individu1_ec5=read.table("~/Desktop/Stage/PLOS one Improving quality of EEG/1/eyesclosed5.dat"
,sep="")
individu1_ec6=read.table("~/Desktop/Stage/PLOS one Improving quality of EEG/1/eyesclosed6.dat"
,sep="")
EEG_closed= read.table("~/Desktop/Stage/PLOS one Improving quality of EEG/eyesclosed_11_14channels.dat",sep="")
EEG_open=read.table("~/Desktop/Stage/PLOS one Improving quality of EEG/flicker_11_14channels.dat",sep="")
library(eegkit)
library(zoo)
par(bg="lightyellow", mfrow=c(2,3))
ts.plot(individu1_ec1[1:50,1])
ts.plot(individu1_ec2[1:50,1])
ts.plot(individu1_ec3[1:50,1])
ts.plot(individu1_ec4[1:50,1])
ts.plot(individu1_ec5[1:50,1])
ts.plot(individu1_ec6[1:50,1])
library(eegkit)
par(bg="lightyellow")
library(eegkit)
library(tidyverse)
library(lubridate)
library(timetk)
x=ts(EEG_closed)
Fs=length(x)/30
r=eegfft(x, Fs)
stationary.test(ts(EEG_open[1:120,1]))
library(eegkit)
par(mfrow=c(1,2))
eegpsd(bastien_f, Fs=128, lower =8, upper =15, units = "dB",main="Eyes closed")
eegpsd(bastien_o, Fs=128, lower =8, upper =15, units = "dB",main="Eyes open")
choose(100,50)
choose(100,50)*0.5^100
setwd("~/Desktop/renduStage/MindReadr")
shiny::runApp()
